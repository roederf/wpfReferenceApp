// -----------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by:
//        The WPF ShaderEffect Generator
//        http://wpfshadergenerator.codeplex.com
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// -----------------------------------------------------------------------------
namespace UIControls.Effects
{
    using System;
    using System.Windows;
    using System.Windows.Media;
    using System.Windows.Media.Effects;
    using System.Windows.Media.Media3D;
    
    
    /// <summary></summary>
    public class ConeGradient : System.Windows.Media.Effects.ShaderEffect
    {
        
        /// <summary>First Color.</summary>
        public static readonly DependencyProperty Color1Property = DependencyProperty.Register("Color1", typeof(System.Windows.Media.Color), typeof(ConeGradient), new UIPropertyMetadata(Color.FromArgb(255,0,0,0), PixelShaderConstantCallback(1)));
        /// <summary>Second Color.</summary>
        public static readonly DependencyProperty Color2Property = DependencyProperty.Register("Color2", typeof(System.Windows.Media.Color), typeof(ConeGradient), new UIPropertyMetadata(Color.FromArgb(255,0,0,0), PixelShaderConstantCallback(2)));
        /// <summary>Relative Angle offset between 0 and 1.</summary>
        public static readonly DependencyProperty AngleProperty = DependencyProperty.Register("Angle", typeof(System.Single), typeof(ConeGradient), new UIPropertyMetadata((float)0, PixelShaderConstantCallback(3)));
        /// <summary>blabla</summary>
        public static readonly DependencyProperty ImplicitInputSamplerProperty = ShaderEffect.RegisterPixelShaderSamplerProperty("ImplicitInputSampler", typeof(ConeGradient), 0, SamplingMode.Auto);
        
        public ConeGradient()
        {
            PixelShader pixelShader = new PixelShader();
            pixelShader.UriSource = new Uri("pack://application:,,,/UIControls;component/Effects/ConeGradient.ps", UriKind.Absolute);
            this.PixelShader = pixelShader;
            this.UpdateShaderValue(Color1Property);
            this.UpdateShaderValue(Color2Property);
            this.UpdateShaderValue(AngleProperty);
            this.UpdateShaderValue(ImplicitInputSamplerProperty);
            this.DdxUvDdyUvRegisterIndex = -1;
        }
        
        /// <summary>First Color.</summary>
        public virtual System.Windows.Media.Color Color1
        {
            get
            {
                return ((System.Windows.Media.Color)(this.GetValue(Color1Property)));
            }
            set
            {
                this.SetValue(Color1Property, value);
            }
        }
        
        /// <summary>Second Color.</summary>
        public virtual System.Windows.Media.Color Color2
        {
            get
            {
                return ((System.Windows.Media.Color)(this.GetValue(Color2Property)));
            }
            set
            {
                this.SetValue(Color2Property, value);
            }
        }
        
        /// <summary>Relative Angle offset between 0 and 1.</summary>
        public virtual float Angle
        {
            get
            {
                return ((float)(this.GetValue(AngleProperty)));
            }
            set
            {
                this.SetValue(AngleProperty, value);
            }
        }
        
        /// <summary>blabla</summary>
        public virtual System.Windows.Media.Brush ImplicitInputSampler
        {
            get
            {
                return ((System.Windows.Media.Brush)(this.GetValue(ImplicitInputSamplerProperty)));
            }
            set
            {
                this.SetValue(ImplicitInputSamplerProperty, value);
            }
        }
    }
}
